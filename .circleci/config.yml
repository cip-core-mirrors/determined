# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@1.8.4
  slack: circleci/slack@3.4.2

parameters:
  det-version:
    type: string
    default: 0.12.13.dev0

commands:
  google-application-creds:
    steps:
      - run:
          name: Set GOOGLE_APPLICATION_CREDENTIALS
          command: |
            GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
            echo "export GOOGLE_APPLICATION_CREDENTIALS=\"${GOOGLE_APPLICATION_CREDENTIALS}\"" >> $BASH_ENV

  install-wheel:
    parameters:
      package-name:
        type: string
      package-location:
        type: string
    steps:
      - run:
          name: Install <<parameters.package-name>>
          working_directory: <<parameters.package-location>>
          command: |
            ls
            make build
            pip install --find-links dist <<parameters.package-name>>==<< pipeline.parameters.det-version >>
            pip install --no-deps --force-reinstall --find-links dist <<parameters.package-name>>==<< pipeline.parameters.det-version >>

  setup-python-venv:
    description: Set up and create Python venv.
    parameters:
      determined-common:
        type: boolean
        default: false
      determined-deploy:
        type: boolean
        default: false
      extras-requires:
        type: string
        default: ""
      executor:
        type: string
    steps:
      - run:
          name: Setup venv
          command: |
            python3.6 -m venv /tmp/venv
            echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
            /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools

      - run:
          name: Write cache key
          command: |
            echo <<parameters.executor>> > /tmp/cachefile
            if [ "<<parameters.determined-common>>" = "true" ]; then
              cat common/setup.py >> /tmp/cachefile
            fi
            if [ "<<parameters.determined-deploy>>" = "true" ]; then
              cat deploy/setup.py >> /tmp/cachefile
            fi
            echo <<parameters.extras-requires>> >> /tmp/cachefile

      - restore_cache:
          keys:
            - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
      - when:
          condition: <<parameters.determined-common>>
          steps:
            - install-wheel:
                package-name: determined-common
                package-location: ~/project/common
      - when:
          condition: <<parameters.determined-deploy>>
          steps:
            - install-wheel:
                package-name: determined-deploy
                package-location: ~/project/deploy
      - run:
          name: Install <<parameters.extras-requires>>
          command: |
            if [ -n "<<parameters.extras-requires>>" ]; then
              pip install <<parameters.extras-requires>>
            fi
      - save_cache:
          key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
          paths:
            - "/tmp/venv"

jobs:
  report-running-instances:
    docker:
      - image: python:3.6.9
    steps:
      - checkout
      - gcp-cli/install
      - gcp-cli/initialize
      - google-application-creds
      - run: pip install boto3 google-api-python-client slackclient terminaltables
      - run: python report_running_instances.py

  rebase-ee:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Set up Determined CI git user
          command: |
            git config --global user.email "automation@determined.ai"
            git config --global user.name "Determined CI"
      - run:
          command: git clone git@github.com:determined-ai/determined-ee.git
          working_directory: /tmp
      - run:
          name: Set up determined-ee repo
          command: |
            git remote add oss git@github.com:determined-ai/determined.git
            git fetch --all
            git checkout master
            git reset --hard origin/master
          working_directory: /tmp/determined-ee
      - run:
          command: git rebase oss/master
          working_directory: /tmp/determined-ee
      - run:
          command: git push origin master --force-with-lease
          working_directory: /tmp/determined-ee
      - slack/status:
          fail_only: true
          failure_message: ':thisisfine: A \`${CIRCLE_JOB}\` job has failed!'
          mentions: "channel"

  cleanup-stacks:
    docker:
      - image: determinedai/cimg-base:stable
    steps:
      - checkout
      - setup-python-venv:
          determined-common: true
          determined-deploy: true
          executor: determinedai/cimg-base:stable
      - run:
          no_output_timeout: 30m
          command: python remove_stacks.py

workflows:
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - report-running-instances:
          context: determined-production
      - rebase-ee:
          context: slack

  cleanup:
#    triggers:
#      - schedule:
#          cron: "0 11,17,23 * * *" # every 6 hours after 5 am
#          filters:
#            branches:
#              only:
#                - master
    jobs:
      - cleanup-stacks:
          context: aws
